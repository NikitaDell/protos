// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package quizv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// QuizClient is the client API for Quiz service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuizClient interface {
	GetQuestion(ctx context.Context, in *GetQuestionRequest, opts ...grpc.CallOption) (*GetQuestionResponse, error)
	RegisterAnswer(ctx context.Context, in *RegisterAnswerRequest, opts ...grpc.CallOption) (*RegisterAnswerResponse, error)
	CheckAnswer(ctx context.Context, in *CheckAnswerRequest, opts ...grpc.CallOption) (*CheckAnswerResponse, error)
}

type quizClient struct {
	cc grpc.ClientConnInterface
}

func NewQuizClient(cc grpc.ClientConnInterface) QuizClient {
	return &quizClient{cc}
}

func (c *quizClient) GetQuestion(ctx context.Context, in *GetQuestionRequest, opts ...grpc.CallOption) (*GetQuestionResponse, error) {
	out := new(GetQuestionResponse)
	err := c.cc.Invoke(ctx, "/quiz.Quiz/GetQuestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quizClient) RegisterAnswer(ctx context.Context, in *RegisterAnswerRequest, opts ...grpc.CallOption) (*RegisterAnswerResponse, error) {
	out := new(RegisterAnswerResponse)
	err := c.cc.Invoke(ctx, "/quiz.Quiz/RegisterAnswer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quizClient) CheckAnswer(ctx context.Context, in *CheckAnswerRequest, opts ...grpc.CallOption) (*CheckAnswerResponse, error) {
	out := new(CheckAnswerResponse)
	err := c.cc.Invoke(ctx, "/quiz.Quiz/CheckAnswer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuizServer is the server API for Quiz service.
// All implementations must embed UnimplementedQuizServer
// for forward compatibility
type QuizServer interface {
	GetQuestion(context.Context, *GetQuestionRequest) (*GetQuestionResponse, error)
	RegisterAnswer(context.Context, *RegisterAnswerRequest) (*RegisterAnswerResponse, error)
	CheckAnswer(context.Context, *CheckAnswerRequest) (*CheckAnswerResponse, error)
	mustEmbedUnimplementedQuizServer()
}

// UnimplementedQuizServer must be embedded to have forward compatible implementations.
type UnimplementedQuizServer struct {
}

func (UnimplementedQuizServer) GetQuestion(context.Context, *GetQuestionRequest) (*GetQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuestion not implemented")
}
func (UnimplementedQuizServer) RegisterAnswer(context.Context, *RegisterAnswerRequest) (*RegisterAnswerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAnswer not implemented")
}
func (UnimplementedQuizServer) CheckAnswer(context.Context, *CheckAnswerRequest) (*CheckAnswerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAnswer not implemented")
}
func (UnimplementedQuizServer) mustEmbedUnimplementedQuizServer() {}

// UnsafeQuizServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuizServer will
// result in compilation errors.
type UnsafeQuizServer interface {
	mustEmbedUnimplementedQuizServer()
}

func RegisterQuizServer(s *grpc.Server, srv QuizServer) {
	s.RegisterService(&_Quiz_serviceDesc, srv)
}

func _Quiz_GetQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizServer).GetQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quiz.Quiz/GetQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizServer).GetQuestion(ctx, req.(*GetQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Quiz_RegisterAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterAnswerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizServer).RegisterAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quiz.Quiz/RegisterAnswer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizServer).RegisterAnswer(ctx, req.(*RegisterAnswerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Quiz_CheckAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAnswerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizServer).CheckAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quiz.Quiz/CheckAnswer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizServer).CheckAnswer(ctx, req.(*CheckAnswerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Quiz_serviceDesc = grpc.ServiceDesc{
	ServiceName: "quiz.Quiz",
	HandlerType: (*QuizServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetQuestion",
			Handler:    _Quiz_GetQuestion_Handler,
		},
		{
			MethodName: "RegisterAnswer",
			Handler:    _Quiz_RegisterAnswer_Handler,
		},
		{
			MethodName: "CheckAnswer",
			Handler:    _Quiz_CheckAnswer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "quiz/quiz.proto",
}
